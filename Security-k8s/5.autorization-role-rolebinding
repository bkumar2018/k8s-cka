Authorizer:


Node Authorizer 

RBAC - Role based access control 

Webhook - 
    open policy agent 


Role based Access Control  (RBAC):


/////developer-role.yaml /////////

apiVersion: rbac.authorization.k8s.io/v1 
kind: Role
metadata:
    name: developer
rules:
-   apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "get", "create", "update", "delete"]
-   apiGroups: [""]
    resources: ["ConfigMap"]
    verbs: ["create"]

//////

k create -f developer-role.yaml

//////devuser-developer-binding.yaml /////

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: devuser-developer-binding 
subjects:
-   kind: User
    name: dev-User
    apiGroup: rbac.authorization.k8s.io 
roleRef:
    kind: Role
    name: developer
    apiGroup: rbac.authorization.k8s.io 

//////////////

k get roles
k get rolebindings 
k decribe role developer
k decribe rolebinding deveuser-developer-binding


k auth can-i create deployments

k auth can-i delete nodes 


Q:
Inspect the environment and identify the authorization modes configured on the cluster.

Check the kube-apiserver settings.

A:
controlplane ~ ✖ k describe pod kube-apiserver-controlplane -n kube-system | grep "authorization-mode"
      --authorization-mode=Node,RBAC


cat /etc/kubernets/manifets/kube-apiserver.yaml 
ps -aux | grep authorization



controlplane ~ ➜  k get roles
No resources found in default namespace.





Other name spaces:

controlplane ~ ➜  k get roles -A
NAMESPACE     NAME                                             CREATED AT
blue          developer                                        2025-09-22T10:52:14Z
kube-public   kubeadm:bootstrap-signer-clusterinfo             2025-09-22T10:47:07Z
kube-public   system:controller:bootstrap-signer               2025-09-22T10:47:07Z
kube-system   extension-apiserver-authentication-reader        2025-09-22T10:47:07Z
kube-system   kube-proxy                                       2025-09-22T10:47:08Z
kube-system   kubeadm:kubelet-config                           2025-09-22T10:47:07Z
kube-system   kubeadm:nodes-kubeadm-config                     2025-09-22T10:47:07Z
kube-system   system::leader-locking-kube-controller-manager   2025-09-22T10:47:07Z
kube-system   system::leader-locking-kube-scheduler            2025-09-22T10:47:07Z
kube-system   system:controller:bootstrap-signer               2025-09-22T10:47:07Z
kube-system   system:controller:cloud-provider                 2025-09-22T10:47:07Z
kube-system   system:controller:token-cleaner                  2025-09-22T10:47:07Z

controlplane ~ ➜  k get roles -A | wc -l
13


controlplane ~ ➜  k get roles -A --no-headers | wc -l 
12


controlplane ~ ✖ k describe role kube-proxy -n kube-system
Name:         kube-proxy
Labels:       <none>
Annotations:  <none>
PolicyRule:
  Resources   Non-Resource URLs  Resource Names  Verbs
  ---------   -----------------  --------------  -----
  configmaps  []                 [kube-proxy]    [get]



k get rolebindings -n kube-system 


controlplane ~ ✖ k describe rolebinding kube-proxy -n kube-system
Name:         kube-proxy
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  Role
  Name:  kube-proxy
Subjects:
  Kind   Name                                             Namespace
  ----   ----                                             ---------
  Group  system:bootstrappers:kubeadm:default-node-token  

//////////


k config view 

k get pods --as dev-user
Error: user dev-user can not list resource pods in api gropus in namespace "default"

kubectl create role --help 


To create a Role:- kubectl create role developer --namespace=default --verb=list,create,delete --resource=pods

k describe role developer 


kubectl create rolebinding  --help 

To create a RoleBinding:- kubectl create rolebinding dev-user-binding --namespace=default --role=developer --user=dev-user

k describe rolebinding dev-user-binding


controlplane ~ ✖ kubectl create role developer --namespace=default --verb=list,create,delete --resource=pods
role.rbac.authorization.k8s.io/developer created

controlplane ~ ➜  kubectl create rolebinding dev-user-binding --namespace=default --role=developer --user=dev-user
rolebinding.rbac.authorization.k8s.io/dev-user-binding created


controlplane ~ ✖ kubectl create clusterrole node-admin --verb=get,list,watch --re
source=pods 
clusterrole.rbac.authorization.k8s.io/node-admin created

controlplane ~ ✖ k create clusterrolebinding michelle-binding --clusterrole=node-admin --user=michelle 
clusterrolebinding.rbac.authorization.k8s.io/michelle-binding created






using yaml file:

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: developer
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "create","delete"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dev-user-binding
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer
  apiGroup: rbac.authorization.k8s.io

///////////////
k --as dev-user get pod dark-blue-app -n blue 
Error: 

k get roles -n blue 

k get rolebindings -n blue 

k describe role developer -n blue 



k --as dev-user create deployment nginx --image=nginx -n blue 
Error:

controlplane ~ ➜  k edit role developer -n blue
role.rbac.authorization.k8s.io/developer edited

controlplane ~ ➜  k get pods -n blue
NAME            READY   STATUS    RESTARTS   AGE
blue-app        1/1     Running   0          25m
dark-blue-app   1/1     Running   0          25m

controlplane ~ ➜  


k describe role developer -n blue 





apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer
  namespace: blue
rules:
- apiGroups:
  - apps
  resourceNames:
  - dark-blue-app
  resources:
  - pods
  verbs:
  - get
  - watch
  - create
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create


